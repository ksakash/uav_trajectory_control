<launch>
  <!-- Vehicle namespace -->
  <arg name="uuv_name" default="uav0"/>
  <!-- Name of the vehicle model -->
  <arg name="model_name" default="$(arg uuv_name)"/>
  <!-- Thruster saturation -->
  <arg name="saturation" default="1200"/>
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>
  <!--
    Set this flag to true to compute both reference and error vectors wrt
    world_ned frame
  -->
  <arg name="use_ned_frame" default="false"/>
  <param name="use_cascaded_pid" value="true" type="bool"/>

    <group ns="uav0">
      <node pkg="uav_trajectory_control"
        type="cascaded_pid_dp_controller.py"
        name="cascaded_pid_dp_controller"
        output="screen"
        unless="$(arg use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
      </node>
      <node pkg="uav_trajectory_control"
        type="odom_redirect.py"
        name="odom_redirect"
        output="screen" />
    </group>

    <group ns="uav1">
      <node pkg="uav_trajectory_control"
        type="cascaded_pid_dp_controller.py"
        name="cascaded_pid_dp_controller"
        output="screen"
        unless="$(arg use_ned_frame)">
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
      </node>
      <node pkg="uav_trajectory_control"
        type="odom_redirect.py"
        name="odom_redirect"
        output="screen" />
    </group>

    <group ns="uav2">
      <node pkg="uav_trajectory_control"
        type="cascaded_pid_dp_controller.py"
        name="cascaded_pid_dp_controller"
        output="screen"
        unless="$(arg use_ned_frame)">
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
      </node>
      <node pkg="uav_trajectory_control"
        type="odom_redirect.py"
        name="odom_redirect"
        output="screen" />
    </group>

    <group ns="uav3">
      <node pkg="uav_trajectory_control"
        type="cascaded_pid_dp_controller.py"
        name="cascaded_pid_dp_controller"
        output="screen"
        unless="$(arg use_ned_frame)">
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
      </node>
      <node pkg="uav_trajectory_control"
        type="odom_redirect.py"
        name="odom_redirect"
        output="screen" />
    </group>

</launch>
